name: Release
on:
  push:
    branches:
      - master

env:
  HUSKY: 0

jobs:
  release:
    permissions:
      contents: write # for release publishing

    name: Release
    env:
      commitmsg: ${{ github.event.head_commit.message }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8 # v3
        with:
          node-version: lts/*
          cache: 'yarn'
      - name: Install dependencies Node
        run: yarn install --frozen-lockfile --non-interactive
      - run: yarn build
      - name: Release Node
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
      - run: yarn copy:lua:python
      - name: Setup Python
        uses: actions/setup-python@bd6b4b6205c4dbad673328db7b31b7fab9e241c0 # v4
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies Python
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy types-redis
          pip install -r python/requirements.txt
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 ./python --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 ./python --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Release Python
        if: ${{ contains(env.commitmsg, '(python)') }}
        run: |
          cd python
          pip install packaging
          git config --global user.email "manast@taskforce.sh"
          git config --global user.name "manast"
          export VERSION=$(semantic-release print-version)
          if [ ! -z "$VERSION" ]; then
            GH_TOKEN=${{ secrets.GITHUB_TOKEN }} PYPI_TOKEN=${{ secrets.PYPI_TOKEN }} semantic-release publish
          fi
